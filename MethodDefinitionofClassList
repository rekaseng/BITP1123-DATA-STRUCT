#pragma once
//List.h
//Declaration of class list
#ifndef LIST_H
#define LIST_H

const int maxSize = 100;

class List
{
public:
	List();
	~List();

	int numberOfItem();
	void addItem(int Item);
	void printItem();

private:
	int size;
	int array[maxSize];
};
#endif // !LIST_H


//List.cpp
//Define the implementation of all methods in class list

#include <iostream>
#include "List.h"
using namespace std;

List::List()
{
	size = 0;
}

List::~List(){}

int List::numberOfItem() {
	return size;
}

void List::addItem(int item)
{
	if (size == maxSize)
	{
		cout << "***There is no more place left****\n";
		return;
	}

	array[size] = item;
	size++;
}

void List::printItem()
{
	for (int i = 0; i < size; i++)
	{
		cout << array[i] << " ";
		cout << endl;
	}
}


//ListMain.cpp
//Implementation
//Create object and method implementation

#include <stdio.h>
#include <iostream>
#include "List.h"
using namespace std;

void main()
{
	int item;

	List ItemList;

	cout << "Now there are : " << ItemList.numberOfItem() << " item in the list\n\n";

	cout << "Enter a digit : ";
	cin >> item;

	for (int i = 0; i < 10; i++)
	{
		ItemList.addItem(item);
		cout << "Item " << item++ << " is added.";
	}
	cout << "Now there are : " << ItemList.numberOfItem() << " item in the list\n\n";
	cout << "The list are : \n";
	ItemList.printItem();

	system("pause");
}
